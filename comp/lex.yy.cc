/* A lexical scanner generated by flex */

/* Scanner skeleton version:
 * $Header: /home/daffy/u0/vern/flex/RCS/flex.skl,v 2.91 96/09/10 16:58:48 vern Exp $
 */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5



/* cfront 1.2 defines "c_plusplus" instead of "__cplusplus" */
#ifdef c_plusplus
#ifndef __cplusplus
#define __cplusplus
#endif
#endif


#ifdef __cplusplus

#include <stdlib.h>
#include <unistd.h>
#include <iostream>
using namespace std;


/* Use prototypes in function declarations. */
#define YY_USE_PROTOS

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

#if __STDC__

#define YY_USE_PROTOS
#define YY_USE_CONST

#endif	/* __STDC__ */
#endif	/* ! __cplusplus */

#ifdef __TURBOC__
 #pragma warn -rch
 #pragma warn -use
#include <io.h>
#include <stdlib.h>
#define YY_USE_CONST
#define YY_USE_PROTOS
#endif

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif


#ifdef YY_USE_PROTOS
#define YY_PROTO(proto) proto
#else
#define YY_PROTO(proto) ()
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN yy_start = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START ((yy_start - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart( yyin )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#define YY_BUF_SIZE 16384

typedef struct yy_buffer_state *YY_BUFFER_STATE;

extern int yyleng;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

/* The funky do-while in the following #define is used to turn the definition
 * int a single C statement (which needs a semi-colon terminator).  This
 * avoids problems with code like:
 *
 * 	if ( condition_holds )
 *		yyless( 5 );
 *	else
 *		do_something_else();
 *
 * Prior to using the do-while the compiler would get upset at the
 * "else" because it interpreted the "if" statement as being all
 * done when it reached the ';' after the yyless() call.
 */

/* Return all but the first 'n' matched characters back to the input stream. */

#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
		*yy_cp = yy_hold_char; \
		YY_RESTORE_YY_MORE_OFFSET \
		yy_c_buf_p = yy_cp = yy_bp + n - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, yytext_ptr )

/* The following is because we cannot portably get our hands on size_t
 * (without autoconf's help, which isn't available because we want
 * flex-generated scanners to compile on their own).
 */
typedef unsigned int yy_size_t;


struct yy_buffer_state
	{
	istream* yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;
#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2
	};


/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 */
#define YY_CURRENT_BUFFER yy_current_buffer



static void *yy_flex_alloc YY_PROTO(( yy_size_t ));
static void *yy_flex_realloc YY_PROTO(( void *, yy_size_t ));
static void yy_flex_free YY_PROTO(( void * ));

#define yy_new_buffer yy_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! yy_current_buffer ) \
		yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE ); \
	yy_current_buffer->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! yy_current_buffer ) \
		yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE ); \
	yy_current_buffer->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (yy_current_buffer->yy_at_bol)


#define YY_USES_REJECT

#define yywrap() 1
#define YY_SKIP_YYWRAP
typedef unsigned char YY_CHAR;
#define yytext_ptr yytext
#define YY_INTERACTIVE

#include <FlexLexer.h>


/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	yytext_ptr = yy_bp; \
	yyleng = (int) (yy_cp - yy_bp); \
	yy_hold_char = *yy_cp; \
	*yy_cp = '\0'; \
	yy_c_buf_p = yy_cp;

#define YY_NUM_RULES 70
#define YY_END_OF_BUFFER 71
static yyconst short int yy_acclist[294] =
    {   0,
       71,   70,   57,   70,   68,   70,   67,   70,   67,   70,
       67,   70,   44,   70,   67,   70,   70,   32,   70,   33,
       70,   39,   70,   30,   70,   24,   70,   31,   70,   17,
       70,   67,   70,   64,   65,   70,   64,   65,   70,   11,
       70,   16,   70,   25,   70,   43,   70,   26,   70,   70,
       63,   70,   63,   70,   63,   70,   63,   70,   48,   70,
       49,   70,   63,   70,   63,   70,   63,   70,   63,   70,
       63,   70,   63,   70,   63,   70,   63,   70,   63,   70,
       63,   70,   63,   70,   22,   70,   67,   70,   23,   70,
       41,   62,   35,   69,   66,   65,   64,   37,   40,   38,

       63,   63,   63,   63,   63,   63,   63,   63,   63,   63,
       55,   63,   63,   63,   63,   63,   63,   63,   18,   63,
       46,   63,   63,   63,   63,   63,   63,   63,   63,   63,
       36,   61,   66,   66,   65,   63,   63,   63,   63,   63,
       63,   63,   63,   63,   63,   63,   63,   63,   63,   63,
       63,   42,   63,   15,   63,   63,   63,   63,   63,    1,
       63,   63,   63,   63,   66,   65,   27,   63,   63,   63,
       63,   63,   63,   53,   63,   63,   14,   63,   63,   63,
       47,   63,   56,   63,   63,   63,   63,   63,   63,   63,
       58,   63,   63,   29,   63,   63,   63,   63,   63,   63,

       63,    8,   63,    2,   63,   28,   63,   63,   59,   63,
       63,   13,   63,   63,   63,   63,   63,   45,   63,   63,
       63,   63,   63,   63,   63,   63,   60,   63,   50,   63,
       52,   63,   63,   19,   63,   63,   63,   63,   63,   54,
       63,    7,   63,   51,   63,   21,   63,   63,   12,   63,
       63,   63,   10,   63,   63,   63,   63,    9,   20,   63,
       63,   63,   63,   63,    3,   63,   63,   63,   63,   63,
       63,    6,   63,   63,   63,   63,   63,   34,   63,   63,
       63,   63,   63,   63,   63,   63,   63,   63,    4,   63,
       63,    5,   63

    } ;

static yyconst short int yy_accept[270] =
    {   0,
        1,    1,    1,    2,    3,    5,    7,    9,   11,   13,
       15,   17,   18,   20,   22,   24,   26,   28,   30,   32,
       34,   37,   40,   42,   44,   46,   48,   50,   51,   53,
       55,   57,   59,   61,   63,   65,   67,   69,   71,   73,
       75,   77,   79,   81,   83,   85,   87,   89,   91,   92,
       92,   93,   94,   94,   94,   95,   96,   97,   97,   98,
       99,  100,  101,  101,  101,  101,  102,  103,  104,  105,
      106,  107,  108,  109,  110,  111,  113,  114,  115,  116,
      117,  118,  119,  121,  123,  124,  125,  126,  127,  128,
      129,  130,  131,  132,  133,  134,  135,  136,  136,  136,

      136,  136,  136,  137,  138,  139,  140,  141,  142,  143,
      144,  145,  146,  147,  148,  149,  150,  151,  152,  154,
      156,  157,  158,  159,  160,  162,  163,  164,  165,  166,
      167,  168,  168,  168,  168,  168,  168,  169,  170,  171,
      172,  173,  174,  176,  177,  179,  180,  181,  183,  185,
      186,  187,  188,  189,  190,  191,  193,  194,  196,  197,
      197,  197,  197,  197,  197,  198,  199,  200,  201,  202,
      204,  206,  208,  209,  211,  212,  214,  215,  216,  217,
      218,  220,  220,  220,  220,  220,  220,  220,  221,  222,
      223,  224,  225,  226,  227,  229,  231,  233,  234,  234,

      234,  234,  234,  234,  235,  236,  237,  238,  239,  240,
      242,  244,  246,  246,  246,  247,  247,  247,  248,  249,
      251,  252,  253,  253,  253,  253,  254,  255,  256,  257,
      258,  258,  259,  260,  261,  262,  263,  264,  264,  265,
      267,  268,  269,  269,  270,  271,  272,  272,  274,  275,
      276,  276,  277,  278,  279,  280,  281,  282,  283,  284,
      285,  286,  287,  288,  289,  291,  292,  294,  294
    } ;

static yyconst int yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    2,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    3,    4,    5,    6,    6,    7,    8,    9,   10,
       11,   12,   13,   14,   15,   16,   17,   18,   19,   19,
       19,   19,   19,   19,   19,   19,   19,   20,   21,   22,
       23,   24,    6,   25,   26,   27,   28,   26,   29,   26,
       26,   26,   26,   26,   26,   26,   26,   30,   31,   32,
       26,   26,   33,   26,   26,   26,   26,   26,   26,   26,
       34,   35,   36,   37,   26,   35,   38,   39,   40,   41,

       42,   43,   44,   45,   46,   26,   47,   48,   49,   50,
       51,   52,   26,   53,   54,   55,   56,   57,   58,   59,
       60,   26,   61,   62,   63,    6,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst int yy_meta[64] =
    {   0,
        1,    2,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    3,    3,    1,
        1,    1,    1,    1,    1,    4,    4,    4,    4,    4,
        4,    4,    4,    5,    5,    5,    5,    4,    4,    4,
        4,    4,    4,    4,    4,    4,    4,    4,    4,    4,
        4,    4,    4,    4,    4,    4,    4,    4,    4,    4,
        1,    1,    1
    } ;

static yyconst short int yy_base[273] =
    {   0,
        0,    0,  314,  315,  315,  315,  290,  307,  315,  315,
      303,    0,  315,  315,  315,   46,  315,   48,  315,   56,
       64,   69,  315,  315,  287,  286,  285,   29,    0,  269,
       37,  250,  315,  315,  252,   39,   44,   28,   51,   51,
      262,   45,   19,  252,  257,  315,  239,  315,  315,  295,
      294,  315,  289,   90,  315,  280,  315,   86,   95,  315,
      315,  315,  246,   66,   64,    0,  241,   89,  246,  238,
      250,   69,  253,  240,  246,    0,  234,  231,  238,  235,
      233,  230,    0,    0,  227,  226,  227,  233,   65,  226,
      231,  230,  315,  315,    0,  258,  114,  233,  221,  217,

       45,  232,  215,  210,  213,  219,  235,  227,  222,  223,
      209,  207,  222,  217,  209,  203,  218,  217,    0,    0,
      198,  197,  197,  209,    0,  208,  208,  200,  230,  315,
      315,  198,  203,  187,  188,  194,  212,  200,  186,  206,
      194,  189,    0,  190,    0,  179,  177,    0,    0,  190,
      183,  175,  176,  188,  187,    0,  185,    0,  183,  182,
      170,  184,   84,  175,  161,  177,  172,  166,  189,    0,
        0,    0,  167,    0,  166,    0,  163,  157,  166,  168,
        0,  160,  165,  152,  166,  165,  164,  163,  150,  151,
      154,  148,  143,  137,    0,    0,    0,  153,  153,  156,

      151,  137,  140,  315,  148,  134,  144,  137,  130,    0,
        0,    0,  135,  144,  315,  141,  134,  129,  134,    0,
      124,  128,  122,  134,  134,  315,  119,  122,  130,  127,
      121,  315,  315,  110,  105,  101,  100,   97,  100,    0,
      121,   89,  102,   97,   87,  116,   93,    0,  103,   83,
       91,   98,   99,  315,   86,   95,   81,   82,   85,   75,
       78,   82,   77,   59,    0,   48,    0,  315,  157,  159,
      162,  166
    } ;

static yyconst short int yy_def[273] =
    {   0,
      268,    1,  268,  268,  268,  268,  268,  269,  268,  268,
      268,  270,  268,  268,  268,  268,  268,  268,  268,  268,
      268,  268,  268,  268,  268,  268,  268,  268,  271,  271,
      271,  271,  268,  268,  271,  271,  271,  271,  271,  271,
      271,  271,  271,  271,  271,  268,  268,  268,  268,  269,
      269,  268,  268,  268,  268,  272,  268,  268,  268,  268,
      268,  268,  268,  268,  268,  271,  271,  271,  271,  271,
      271,  271,  271,  271,  271,  271,  271,  271,  271,  271,
      271,  271,  271,  271,  271,  271,  271,  271,  271,  271,
      271,  271,  268,  268,  272,  272,  268,  268,  268,  268,

      268,  268,  271,  271,  271,  271,  271,  271,  271,  271,
      271,  271,  271,  271,  271,  271,  271,  271,  271,  271,
      271,  271,  271,  271,  271,  271,  271,  271,  272,  268,
      268,  268,  268,  268,  268,  268,  271,  271,  271,  271,
      271,  271,  271,  271,  271,  271,  271,  271,  271,  271,
      271,  271,  271,  271,  271,  271,  271,  271,  271,  268,
      268,  268,  268,  268,  271,  271,  271,  271,  271,  271,
      271,  271,  271,  271,  271,  271,  271,  271,  271,  271,
      271,  268,  268,  268,  268,  268,  268,  271,  271,  271,
      271,  271,  271,  271,  271,  271,  271,  271,  268,  268,

      268,  268,  268,  268,  271,  271,  271,  271,  271,  271,
      271,  271,  268,  268,  268,  268,  268,  271,  271,  271,
      271,  271,  268,  268,  268,  268,  271,  271,  271,  271,
      268,  268,  268,  271,  271,  271,  271,  268,  271,  271,
      271,  271,  268,  271,  271,  271,  268,  271,  271,  271,
      268,  271,  271,  268,  271,  271,  271,  271,  271,  271,
      271,  271,  271,  271,  271,  271,  271,    0,  268,  268,
      268,  268
    } ;

static yyconst short int yy_nxt[379] =
    {   0,
        4,    5,    6,    7,    8,    9,   10,   11,   12,   13,
       14,   15,   16,   17,   18,   19,   20,   21,   22,   23,
       24,   25,   26,   27,   28,   29,   29,   30,   29,   31,
       32,   29,   29,   33,    4,   34,    9,   29,   35,   36,
       37,   38,   39,   29,   29,   40,   29,   29,   29,   29,
       29,   29,   41,   42,   43,   29,   44,   45,   29,   29,
       46,   47,   48,   54,   54,   54,   54,   55,   57,   68,
       63,   89,   56,   57,   64,   77,   72,   78,   90,   58,
       65,   54,   54,   73,   58,   75,   59,   59,   79,   74,
      134,   83,   69,   84,   76,  135,   80,  267,   81,   87,

       85,   82,   88,   97,   97,   58,   57,   54,   54,  266,
       58,   57,   59,   59,   99,  100,  101,  104,  130,  102,
      124,  105,  109,  110,  125,  185,  265,  264,  263,  262,
      261,   97,   97,  260,  186,  259,  258,  257,  256,  255,
      254,  253,  252,  251,  250,  249,  248,  247,  246,  245,
      244,  243,  242,  241,  240,  239,  130,   50,  238,   50,
       50,   50,   53,   53,   66,   66,   95,  237,   95,   95,
       95,  236,  235,  234,  233,  232,  231,  230,  229,  228,
      227,  226,  225,  224,  223,  222,  221,  220,  219,  218,
      217,  216,  215,  214,  213,  212,  211,  210,  209,  208,

      207,  206,  205,  204,  203,  202,  201,  200,  199,  198,
      197,  196,  195,  194,  193,  192,  191,  190,  189,  188,
      187,  184,  183,  182,  181,  180,  179,  178,  177,  176,
      175,  174,  173,  172,  171,  170,  169,  168,  167,  166,
      165,  164,  163,  162,  161,  160,   96,  159,  158,  157,
      156,  155,  154,  153,  152,  151,  150,  149,  148,  147,
      146,  145,  144,  143,  142,  141,  140,  139,  138,  137,
      136,  133,  132,  131,  129,  128,  127,  126,  123,  122,
      121,  120,  119,  118,  117,  116,  115,  114,  113,  112,
      111,  108,  107,  106,  103,   98,   96,   94,   51,   51,

       93,   92,   91,   86,   71,   70,   67,   62,   61,   60,
       52,   51,   49,  268,    3,  268,  268,  268,  268,  268,
      268,  268,  268,  268,  268,  268,  268,  268,  268,  268,
      268,  268,  268,  268,  268,  268,  268,  268,  268,  268,
      268,  268,  268,  268,  268,  268,  268,  268,  268,  268,
      268,  268,  268,  268,  268,  268,  268,  268,  268,  268,
      268,  268,  268,  268,  268,  268,  268,  268,  268,  268,
      268,  268,  268,  268,  268,  268,  268,  268
    } ;

static yyconst short int yy_chk[379] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,   16,   16,   18,   18,   20,   21,   31,
       28,   43,   20,   22,   28,   38,   36,   38,   43,   21,
       28,   21,   21,   36,   22,   37,   22,   22,   39,   36,
      101,   40,   31,   40,   37,  101,   39,  266,   39,   42,

       40,   39,   42,   58,   58,   54,   21,   54,   54,  264,
       59,   22,   59,   59,   64,   64,   65,   68,   97,   65,
       89,   68,   72,   72,   89,  163,  263,  262,  261,  260,
      259,   97,   97,  258,  163,  257,  256,  255,  253,  252,
      251,  250,  249,  247,  246,  245,  244,  243,  242,  241,
      239,  238,  237,  236,  235,  234,   97,  269,  231,  269,
      269,  269,  270,  270,  271,  271,  272,  230,  272,  272,
      272,  229,  228,  227,  225,  224,  223,  222,  221,  219,
      218,  217,  216,  214,  213,  209,  208,  207,  206,  205,
      203,  202,  201,  200,  199,  198,  194,  193,  192,  191,

      190,  189,  188,  187,  186,  185,  184,  183,  182,  180,
      179,  178,  177,  175,  173,  169,  168,  167,  166,  165,
      164,  162,  161,  160,  159,  157,  155,  154,  153,  152,
      151,  150,  147,  146,  144,  142,  141,  140,  139,  138,
      137,  136,  135,  134,  133,  132,  129,  128,  127,  126,
      124,  123,  122,  121,  118,  117,  116,  115,  114,  113,
      112,  111,  110,  109,  108,  107,  106,  105,  104,  103,
      102,  100,   99,   98,   96,   92,   91,   90,   88,   87,
       86,   85,   82,   81,   80,   79,   78,   77,   75,   74,
       73,   71,   70,   69,   67,   63,   56,   53,   51,   50,

       47,   45,   44,   41,   35,   32,   30,   27,   26,   25,
       11,    8,    7,    3,  268,  268,  268,  268,  268,  268,
      268,  268,  268,  268,  268,  268,  268,  268,  268,  268,
      268,  268,  268,  268,  268,  268,  268,  268,  268,  268,
      268,  268,  268,  268,  268,  268,  268,  268,  268,  268,
      268,  268,  268,  268,  268,  268,  268,  268,  268,  268,
      268,  268,  268,  268,  268,  268,  268,  268,  268,  268,
      268,  268,  268,  268,  268,  268,  268,  268
    } ;

#define REJECT \
{ \
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */ \
yy_cp = yy_full_match; /* restore poss. backed-over text */ \
++yy_lp; \
goto find_rule; \
}
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
#line 1 "C:\\Users\\hossam\\Documents\\GitHub\\comp\\comp\\lex.l"
#define INITIAL 0
#line 2 "C:\\Users\\hossam\\Documents\\GitHub\\comp\\comp\\lex.l"
	#include "yacc.hpp"
	#include <stdlib.h>
	int row=1;
	int column=1;
#line 544 "lex.yy.cc"

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int yywrap YY_PROTO(( void ));
#else
extern int yywrap YY_PROTO(( void ));
#endif
#endif


#ifndef yytext_ptr
static void yy_flex_strncpy YY_PROTO(( char *, yyconst char *, int ));
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen YY_PROTO(( yyconst char * ));
#endif

#ifndef YY_NO_INPUT
#endif

#if YY_STACK_USED
static int yy_start_stack_ptr = 0;
static int yy_start_stack_depth = 0;
static int *yy_start_stack = 0;
#ifndef YY_NO_PUSH_STATE
static void yy_push_state YY_PROTO(( int new_state ));
#endif
#ifndef YY_NO_POP_STATE
static void yy_pop_state YY_PROTO(( void ));
#endif
#ifndef YY_NO_TOP_STATE
static int yy_top_state YY_PROTO(( void ));
#endif

#else
#define YY_NO_PUSH_STATE 1
#define YY_NO_POP_STATE 1
#define YY_NO_TOP_STATE 1
#endif

#ifdef YY_MALLOC_DECL
YY_MALLOC_DECL
#else
#if __STDC__
#ifndef __cplusplus
#include <stdlib.h>
#endif
#else
/* Just try to get by without declaring the routines.  This will fail
 * miserably on non-ANSI systems for which sizeof(size_t) != sizeof(int)
 * or sizeof(void*) != sizeof(int).
 */
#endif
#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#define YY_READ_BUF_SIZE 8192
#endif

/* Copy whatever the last rule matched to the standard output. */

#ifndef ECHO
#define ECHO LexerOutput( yytext, yyleng )
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( (result = LexerInput( (char *) buf, max_size )) < 0 ) \
		YY_FATAL_ERROR( "input in flex scanner failed" );
#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) LexerError( msg )
#endif

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL int yyFlexLexer::yylex()
#endif

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

YY_DECL
	{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;

#line 16 "C:\\Users\\hossam\\Documents\\GitHub\\comp\\comp\\lex.l"







#line 679 "lex.yy.cc"

	if ( yy_init )
		{
		yy_init = 0;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! yy_start )
			yy_start = 1;	/* first start state */

		if ( ! yyin )
			yyin = &cin;

		if ( ! yyout )
			yyout = &cout;

		if ( ! yy_current_buffer )
			yy_current_buffer =
				yy_create_buffer( yyin, YY_BUF_SIZE );

		yy_load_buffer_state();
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
		yy_cp = yy_c_buf_p;

		/* Support of yytext. */
		*yy_cp = yy_hold_char;

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = yy_start;
		yy_state_ptr = yy_state_buf;
		*yy_state_ptr++ = yy_current_state;
yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 269 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			*yy_state_ptr++ = yy_current_state;
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 315 );

yy_find_action:
		yy_current_state = *--yy_state_ptr;
		yy_lp = yy_accept[yy_current_state];
find_rule: /* we branch to this label when backing up */
		for ( ; ; ) /* until we find what rule we matched */
			{
			if ( yy_lp && yy_lp < yy_accept[yy_current_state + 1] )
				{
				yy_act = yy_acclist[yy_lp];
					{
					yy_full_match = yy_cp;
					break;
					}
				}
			--yy_cp;
			yy_current_state = *--yy_state_ptr;
			yy_lp = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;

		if ( yy_act != YY_END_OF_BUFFER )
			{
			int yyl;
			for ( yyl = 0; yyl < yyleng; ++yyl )
				if ( yytext[yyl] == '\n' )
					++yylineno;
			}

do_action:	/* This label is used only to access EOF actions. */


		switch ( yy_act )
	{ /* beginning of action switch */
case 1:
YY_RULE_SETUP
#line 23 "C:\\Users\\hossam\\Documents\\GitHub\\comp\\comp\\lex.l"
{cout<<"lex : try \n"; return TRY;}
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 24 "C:\\Users\\hossam\\Documents\\GitHub\\comp\\comp\\lex.l"
{cout<<"lex : catch \n"; return CATCH;}
	YY_BREAK
case 3:
YY_RULE_SETUP
#line 25 "C:\\Users\\hossam\\Documents\\GitHub\\comp\\comp\\lex.l"
{cout<<"lex : NSException \n"; return NSEXception;}
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 26 "C:\\Users\\hossam\\Documents\\GitHub\\comp\\comp\\lex.l"
{cout<<"lex : NullPointerException \n"; return NUllPointerException;}
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 27 "C:\\Users\\hossam\\Documents\\GitHub\\comp\\comp\\lex.l"
{cout<<"lex : OutOfBoundryException \n"; return OUtOfBoundryException;}
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 28 "C:\\Users\\hossam\\Documents\\GitHub\\comp\\comp\\lex.l"
{cout<<"lex : CastException \n"; return CAstException;}
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 29 "C:\\Users\\hossam\\Documents\\GitHub\\comp\\comp\\lex.l"
{cout<<"lex : finally \n"; return FINALLY;}
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 38 "C:\\Users\\hossam\\Documents\\GitHub\\comp\\comp\\lex.l"
{			column+=5;	yylval.r.myColno=column;								return BREAK;}
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 39 "C:\\Users\\hossam\\Documents\\GitHub\\comp\\comp\\lex.l"
{			column+=10;	yylval.r.myColno=column;								return AT_INTERFACE;}
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 40 "C:\\Users\\hossam\\Documents\\GitHub\\comp\\comp\\lex.l"
{			column+=9;	yylval.r.myColno=column;								return AT_PROTOCOL;}
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 41 "C:\\Users\\hossam\\Documents\\GitHub\\comp\\comp\\lex.l"
{	        column+=1;	yylval.r.myColno=column;								return SEMI_COLUMN;}
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 42 "C:\\Users\\hossam\\Documents\\GitHub\\comp\\comp\\lex.l"
{			column+=8;	yylval.r.myColno=column;								return NSSTRING;}
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 43 "C:\\Users\\hossam\\Documents\\GitHub\\comp\\comp\\lex.l"
{			column+=5;	yylval.r.myColno=column;								return FLOAT;}
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 44 "C:\\Users\\hossam\\Documents\\GitHub\\comp\\comp\\lex.l"
{			column+=4;	yylval.r.myColno=column;								return CHAR;}
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 45 "C:\\Users\\hossam\\Documents\\GitHub\\comp\\comp\\lex.l"
{			column+=3;	yylval.r.myColno=column;								return INT;}
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 46 "C:\\Users\\hossam\\Documents\\GitHub\\comp\\comp\\lex.l"
{			column+=1;	yylval.r.myColno=column;								return SEMI_COMA;}
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 47 "C:\\Users\\hossam\\Documents\\GitHub\\comp\\comp\\lex.l"
{			column+=1;	yylval.r.myColno=column;								return DOT;}
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 48 "C:\\Users\\hossam\\Documents\\GitHub\\comp\\comp\\lex.l"
{			column+=2;	yylval.r.myColno=column;								return ID;}
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 49 "C:\\Users\\hossam\\Documents\\GitHub\\comp\\comp\\lex.l"
{			column+=7;	yylval.r.myColno=column;								return AT_PUBLIC;}
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 50 "C:\\Users\\hossam\\Documents\\GitHub\\comp\\comp\\lex.l"
{			column+=10;	yylval.r.myColno=column;								return AT_PROTECTED;}
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 51 "C:\\Users\\hossam\\Documents\\GitHub\\comp\\comp\\lex.l"
{			column+=8;	yylval.r.myColno=column;								return AT_PRIVATE;}
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 52 "C:\\Users\\hossam\\Documents\\GitHub\\comp\\comp\\lex.l"
{			column+=1;	yylval.r.myColno=column;									return OPEN_S;}
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 53 "C:\\Users\\hossam\\Documents\\GitHub\\comp\\comp\\lex.l"
{			column+=1;	yylval.r.myColno=column;						return CLOSE_S;}
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 54 "C:\\Users\\hossam\\Documents\\GitHub\\comp\\comp\\lex.l"
{			column+=1;	yylval.r.myColno=column;		return COMMA;}
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 55 "C:\\Users\\hossam\\Documents\\GitHub\\comp\\comp\\lex.l"
{			column+=1;	yylval.r.myColno=column;	return LESS_THAN;}
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 56 "C:\\Users\\hossam\\Documents\\GitHub\\comp\\comp\\lex.l"
{			column+=1;	yylval.r.myColno=column;							return MORE_THAN;}
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 57 "C:\\Users\\hossam\\Documents\\GitHub\\comp\\comp\\lex.l"
{			column+=4;	yylval.r.myColno=column;									return AT_END;}
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 58 "C:\\Users\\hossam\\Documents\\GitHub\\comp\\comp\\lex.l"
{			column+=5;	yylval.r.myColno=column;							return CONST;}
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 59 "C:\\Users\\hossam\\Documents\\GitHub\\comp\\comp\\lex.l"
{			column+=4;	yylval.r.myColno=column;							return VOID;}
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 60 "C:\\Users\\hossam\\Documents\\GitHub\\comp\\comp\\lex.l"
{			column+=1;	yylval.r.myColno=column;								return PLUS;}
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 61 "C:\\Users\\hossam\\Documents\\GitHub\\comp\\comp\\lex.l"
{			column+=1;	yylval.r.myColno=column;								return MINUS;}
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 62 "C:\\Users\\hossam\\Documents\\GitHub\\comp\\comp\\lex.l"
{									column+=1;	yylval.r.myColno=column;		return OPEN_P;}
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 63 "C:\\Users\\hossam\\Documents\\GitHub\\comp\\comp\\lex.l"
{											 column+=1;	yylval.r.myColno=column;return CLOSE_P;}
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 64 "C:\\Users\\hossam\\Documents\\GitHub\\comp\\comp\\lex.l"
{							column+=15;	yylval.r.myColno=column;	return AT_IMPLEMENTATION;}
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 65 "C:\\Users\\hossam\\Documents\\GitHub\\comp\\comp\\lex.l"
{										column+=2;	yylval.r.myColno=column;	return AND_AND;}
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 66 "C:\\Users\\hossam\\Documents\\GitHub\\comp\\comp\\lex.l"
{									column+=2;	yylval.r.myColno=column;		return OR_OR;}
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 67 "C:\\Users\\hossam\\Documents\\GitHub\\comp\\comp\\lex.l"
{										column+=2;	yylval.r.myColno=column;	return LESS_OR_EQUAL;}
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 68 "C:\\Users\\hossam\\Documents\\GitHub\\comp\\comp\\lex.l"
{									column+=2;	yylval.r.myColno=column;		return MORE_OR_EQUAL;}
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 69 "C:\\Users\\hossam\\Documents\\GitHub\\comp\\comp\\lex.l"
{			column+=1;	yylval.r.myColno=column;								return MULTI;}
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 70 "C:\\Users\\hossam\\Documents\\GitHub\\comp\\comp\\lex.l"
{						column+=2;	yylval.r.myColno=column;					return EQUAL_EQUAL;}
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 71 "C:\\Users\\hossam\\Documents\\GitHub\\comp\\comp\\lex.l"
{								column+=2;	yylval.r.myColno=column;			return NOT_EQUAL;}
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 72 "C:\\Users\\hossam\\Documents\\GitHub\\comp\\comp\\lex.l"
{				column+=3;	yylval.r.myColno=column;			return FOR;}
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 73 "C:\\Users\\hossam\\Documents\\GitHub\\comp\\comp\\lex.l"
{			column+=1;	yylval.r.myColno=column;								return EQUAL;}
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 74 "C:\\Users\\hossam\\Documents\\GitHub\\comp\\comp\\lex.l"
{			column+=1;	yylval.r.myColno=column;								return DIV;}
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 75 "C:\\Users\\hossam\\Documents\\GitHub\\comp\\comp\\lex.l"
{			column+=5;	yylval.r.myColno=column;			return WHILE;}
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 76 "C:\\Users\\hossam\\Documents\\GitHub\\comp\\comp\\lex.l"
{			column+=2;	yylval.r.myColno=column;			return  IF;}
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 77 "C:\\Users\\hossam\\Documents\\GitHub\\comp\\comp\\lex.l"
{			column+=4;	yylval.r.myColno=column;	return ELSE;}
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 78 "C:\\Users\\hossam\\Documents\\GitHub\\comp\\comp\\lex.l"
{			column+=1;	yylval.r.myColno=column;			return OPEN_ARR;}
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 79 "C:\\Users\\hossam\\Documents\\GitHub\\comp\\comp\\lex.l"
{			column+=1;	yylval.r.myColno=column;	 return CLOSE_ARR;}
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 80 "C:\\Users\\hossam\\Documents\\GitHub\\comp\\comp\\lex.l"
{           column+=6;	yylval.r.myColno=column;      return STRUCT;      }
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 81 "C:\\Users\\hossam\\Documents\\GitHub\\comp\\comp\\lex.l"
{           column+=7;	yylval.r.myColno=column;      return TYPEDEF;        }
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 82 "C:\\Users\\hossam\\Documents\\GitHub\\comp\\comp\\lex.l"
{           column+=6;	yylval.r.myColno=column;      return SWITCH;      }
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 83 "C:\\Users\\hossam\\Documents\\GitHub\\comp\\comp\\lex.l"
{			column+=4;	yylval.r.myColno=column;      return CASE;}
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 84 "C:\\Users\\hossam\\Documents\\GitHub\\comp\\comp\\lex.l"
{			column+=7;	yylval.r.myColno=column;      return DEFAULT;}
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 85 "C:\\Users\\hossam\\Documents\\GitHub\\comp\\comp\\lex.l"
{			column+=2;	yylval.r.myColno=column;      return DO;}
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 86 "C:\\Users\\hossam\\Documents\\GitHub\\comp\\comp\\lex.l"
{			column+=4;	yylval.r.myColno=column;      return ENUM;}
	YY_BREAK
case 57:
YY_RULE_SETUP
#line 87 "C:\\Users\\hossam\\Documents\\GitHub\\comp\\comp\\lex.l"
{			row++;
								column=1;
								yylval.r.myLineNo=row;
								yylval.r.myColno=column;}
	YY_BREAK
case 58:
YY_RULE_SETUP
#line 91 "C:\\Users\\hossam\\Documents\\GitHub\\comp\\comp\\lex.l"
{			column+=4;	yylval.r.myColno=column;								return TRUE;}
	YY_BREAK
case 59:
YY_RULE_SETUP
#line 92 "C:\\Users\\hossam\\Documents\\GitHub\\comp\\comp\\lex.l"
{			column+=5;	yylval.r.myColno=column;						return FALSE;}
	YY_BREAK
case 60:
YY_RULE_SETUP
#line 93 "C:\\Users\\hossam\\Documents\\GitHub\\comp\\comp\\lex.l"
{			column+=6;	yylval.r.myColno=column;							return RETURN;}
	YY_BREAK
case 61:
YY_RULE_SETUP
#line 94 "C:\\Users\\hossam\\Documents\\GitHub\\comp\\comp\\lex.l"
{			column+=1;	yylval.r.myColno=column;	return CHAR_VAL;}
	YY_BREAK
case 62:
YY_RULE_SETUP
#line 95 "C:\\Users\\hossam\\Documents\\GitHub\\comp\\comp\\lex.l"
{			column += strlen(yytext);
								yylval.r.str = new char[255];
								yylval.r.str[0] = '\0';
								strcpy(yylval.r.str, yytext);
								yylval.r.myLineNo = row;
								yylval.r.myColno = column;			return STRING_VAL;
					}
	YY_BREAK
case 63:
YY_RULE_SETUP
#line 102 "C:\\Users\\hossam\\Documents\\GitHub\\comp\\comp\\lex.l"
{			column += strlen(yytext);
								yylval.r.str = new char[255];
								yylval.r.str[0] = '\0';
								strcpy(yylval.r.str, yytext);
								yylval.r.myLineNo = row;
								yylval.r.myColno = column;
								return IDENTIFIER;}
	YY_BREAK
case 64:
YY_RULE_SETUP
#line 109 "C:\\Users\\hossam\\Documents\\GitHub\\comp\\comp\\lex.l"
{
								column+=strlen(yytext);	yylval.r.myColno=column;
								int i = atoi(yytext);
								yylval.r.i = i;
								return INT_VAL;
					}
	YY_BREAK
case 65:
YY_RULE_SETUP
#line 115 "C:\\Users\\hossam\\Documents\\GitHub\\comp\\comp\\lex.l"
{
								column+=strlen(yytext);	yylval.r.myColno=column;
								float f = atof(yytext);
								return FLOAT_VAL;
					}
	YY_BREAK
case 66:
YY_RULE_SETUP
#line 121 "C:\\Users\\hossam\\Documents\\GitHub\\comp\\comp\\lex.l"
{
								cout<<"\t"<<yytext<<':'<<" it is a Single Line Comment \n";
							}
	YY_BREAK
case 67:
YY_RULE_SETUP
#line 125 "C:\\Users\\hossam\\Documents\\GitHub\\comp\\comp\\lex.l"
{column+=1;	yylval.r.myColno=column; ;return SYMBOL;}
	YY_BREAK
case 68:
YY_RULE_SETUP
#line 126 "C:\\Users\\hossam\\Documents\\GitHub\\comp\\comp\\lex.l"
{column+=1;	yylval.r.myColno=column; }
	YY_BREAK
case 69:
YY_RULE_SETUP
#line 127 "C:\\Users\\hossam\\Documents\\GitHub\\comp\\comp\\lex.l"
{
		 register int c;
     
                     for ( ; ; )
                         {
                         while ( (c = yyinput()) != '*' &&
                                 c != EOF )
								 {
								  if (c == '\n') {row++;}
								  }
                             ;    /* eat up text of comment */
                           if (c == '\n') {row++;}
                         if ( c == '*' )
                             {
                             while ( (c = yyinput()) == '*' )
                                 ;
                             if ( c == '/' )
                                 break;    /* found the end */
                             }
     
                         if ( c == EOF )
                             {
                            
                             break;
                             }
                         }
						 cout << "multi comment line ";
						 yylval.r.myLineNo=row;
						 cout << row;
     }
	YY_BREAK
case 70:
YY_RULE_SETUP
#line 157 "C:\\Users\\hossam\\Documents\\GitHub\\comp\\comp\\lex.l"
ECHO;
	YY_BREAK
#line 1175 "lex.yy.cc"
			case YY_STATE_EOF(INITIAL):
				yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - yytext_ptr) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = yy_hold_char;
		YY_RESTORE_YY_MORE_OFFSET

		if ( yy_current_buffer->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between yy_current_buffer and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			yy_n_chars = yy_current_buffer->yy_n_chars;
			yy_current_buffer->yy_input_file = yyin;
			yy_current_buffer->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( yy_c_buf_p <= &yy_current_buffer->yy_ch_buf[yy_n_chars] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			yy_c_buf_p = yytext_ptr + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state();

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = yytext_ptr + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++yy_c_buf_p;
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = yy_c_buf_p;
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer() )
			{
			case EOB_ACT_END_OF_FILE:
				{
				yy_did_buffer_switch_on_eof = 0;

				if ( yywrap() )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					yy_c_buf_p = yytext_ptr + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				yy_c_buf_p =
					yytext_ptr + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state();

				yy_cp = yy_c_buf_p;
				yy_bp = yytext_ptr + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				yy_c_buf_p =
				&yy_current_buffer->yy_ch_buf[yy_n_chars];

				yy_current_state = yy_get_previous_state();

				yy_cp = yy_c_buf_p;
				yy_bp = yytext_ptr + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
	} /* end of yylex */

yyFlexLexer::yyFlexLexer( istream* arg_yyin, ostream* arg_yyout )
	{
	yyin = arg_yyin;
	yyout = arg_yyout;
	yy_c_buf_p = 0;
	yy_init = 1;
	yy_start = 0;
	yy_flex_debug = 0;
	yylineno = 1;	// this will only get updated if %option yylineno

	yy_did_buffer_switch_on_eof = 0;

	yy_looking_for_trail_begin = 0;
	yy_more_flag = 0;
	yy_more_len = 0;
	yy_more_offset = yy_prev_more_offset = 0;

	yy_start_stack_ptr = yy_start_stack_depth = 0;
	yy_start_stack = 0;

	yy_current_buffer = 0;

#ifdef YY_USES_REJECT
	yy_state_buf = new yy_state_type[YY_BUF_SIZE + 2];
#else
	yy_state_buf = 0;
#endif
	}

yyFlexLexer::~yyFlexLexer()
	{
	delete yy_state_buf;
	yy_delete_buffer( yy_current_buffer );
	}

void yyFlexLexer::switch_streams( istream* new_in, ostream* new_out )
	{
	if ( new_in )
		{
		yy_delete_buffer( yy_current_buffer );
		yy_switch_to_buffer( yy_create_buffer( new_in, YY_BUF_SIZE ) );
		}

	if ( new_out )
		yyout = new_out;
	}

#ifdef YY_INTERACTIVE
int yyFlexLexer::LexerInput( char* buf, int /* max_size */ )
#else
int yyFlexLexer::LexerInput( char* buf, int max_size )
#endif
	{
	if ( yyin->eof() || yyin->fail() )
		return 0;

#ifdef YY_INTERACTIVE
	yyin->get( buf[0] );

	if ( yyin->eof() )
		return 0;

	if ( yyin->bad() )
		return -1;

	return 1;

#else
	(void) yyin->read( buf, max_size );

	if ( yyin->bad() )
		return -1;
	else
		return yyin->gcount();
#endif
	}

void yyFlexLexer::LexerOutput( const char* buf, int size )
	{
	(void) yyout->write( buf, size );
	}

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */

int yyFlexLexer::yy_get_next_buffer()
	{
	register char *dest = yy_current_buffer->yy_ch_buf;
	register char *source = yytext_ptr;
	register int number_to_move, i;
	int ret_val;

	if ( yy_c_buf_p > &yy_current_buffer->yy_ch_buf[yy_n_chars + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( yy_current_buffer->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( yy_c_buf_p - yytext_ptr - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) (yy_c_buf_p - yytext_ptr) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( yy_current_buffer->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		yy_current_buffer->yy_n_chars = yy_n_chars = 0;

	else
		{
		int num_to_read =
			yy_current_buffer->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */
#ifdef YY_USES_REJECT
			YY_FATAL_ERROR(
"input buffer overflow, can't enlarge buffer because scanner uses REJECT" );
#else

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = yy_current_buffer;

			int yy_c_buf_p_offset =
				(int) (yy_c_buf_p - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					yy_flex_realloc( (void *) b->yy_ch_buf,
							 b->yy_buf_size + 2 );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			yy_c_buf_p = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = yy_current_buffer->yy_buf_size -
						number_to_move - 1;
#endif
			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&yy_current_buffer->yy_ch_buf[number_to_move]),
			yy_n_chars, num_to_read );

		yy_current_buffer->yy_n_chars = yy_n_chars;
		}

	if ( yy_n_chars == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart( yyin );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			yy_current_buffer->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	yy_n_chars += number_to_move;
	yy_current_buffer->yy_ch_buf[yy_n_chars] = YY_END_OF_BUFFER_CHAR;
	yy_current_buffer->yy_ch_buf[yy_n_chars + 1] = YY_END_OF_BUFFER_CHAR;

	yytext_ptr = &yy_current_buffer->yy_ch_buf[0];

	return ret_val;
	}


/* yy_get_previous_state - get the state just before the EOB char was reached */

yy_state_type yyFlexLexer::yy_get_previous_state()
	{
	register yy_state_type yy_current_state;
	register char *yy_cp;

	yy_current_state = yy_start;
	yy_state_ptr = yy_state_buf;
	*yy_state_ptr++ = yy_current_state;

	for ( yy_cp = yytext_ptr + YY_MORE_ADJ; yy_cp < yy_c_buf_p; ++yy_cp )
		{
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 269 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		*yy_state_ptr++ = yy_current_state;
		}

	return yy_current_state;
	}


/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */

yy_state_type yyFlexLexer::yy_try_NUL_trans( yy_state_type yy_current_state )
	{
	register int yy_is_jam;

	register YY_CHAR yy_c = 1;
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 269 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 268);
	if ( ! yy_is_jam )
		*yy_state_ptr++ = yy_current_state;

	return yy_is_jam ? 0 : yy_current_state;
	}


void yyFlexLexer::yyunput( int c, register char* yy_bp )
	{
	register char *yy_cp = yy_c_buf_p;

	/* undo effects of setting up yytext */
	*yy_cp = yy_hold_char;

	if ( yy_cp < yy_current_buffer->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		register int number_to_move = yy_n_chars + 2;
		register char *dest = &yy_current_buffer->yy_ch_buf[
					yy_current_buffer->yy_buf_size + 2];
		register char *source =
				&yy_current_buffer->yy_ch_buf[number_to_move];

		while ( source > yy_current_buffer->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		yy_current_buffer->yy_n_chars =
			yy_n_chars = yy_current_buffer->yy_buf_size;

		if ( yy_cp < yy_current_buffer->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;

	if ( c == '\n' )
		--yylineno;

	yytext_ptr = yy_bp;
	yy_hold_char = *yy_cp;
	yy_c_buf_p = yy_cp;
	}


int yyFlexLexer::yyinput()
	{
	int c;

	*yy_c_buf_p = yy_hold_char;

	if ( *yy_c_buf_p == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( yy_c_buf_p < &yy_current_buffer->yy_ch_buf[yy_n_chars] )
			/* This was really a NUL. */
			*yy_c_buf_p = '\0';

		else
			{ /* need more input */
			int offset = yy_c_buf_p - yytext_ptr;
			++yy_c_buf_p;

			switch ( yy_get_next_buffer() )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart( yyin );

					/* fall through */

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap() )
						return EOF;

					if ( ! yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					yy_c_buf_p = yytext_ptr + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) yy_c_buf_p;	/* cast for 8-bit char's */
	*yy_c_buf_p = '\0';	/* preserve yytext */
	yy_hold_char = *++yy_c_buf_p;

	if ( c == '\n' )
		++yylineno;

	return c;
	}


void yyFlexLexer::yyrestart( istream* input_file )
	{
	if ( ! yy_current_buffer )
		yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE );

	yy_init_buffer( yy_current_buffer, input_file );
	yy_load_buffer_state();
	}


void yyFlexLexer::yy_switch_to_buffer( YY_BUFFER_STATE new_buffer )
	{
	if ( yy_current_buffer == new_buffer )
		return;

	if ( yy_current_buffer )
		{
		/* Flush out information for old buffer. */
		*yy_c_buf_p = yy_hold_char;
		yy_current_buffer->yy_buf_pos = yy_c_buf_p;
		yy_current_buffer->yy_n_chars = yy_n_chars;
		}

	yy_current_buffer = new_buffer;
	yy_load_buffer_state();

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	yy_did_buffer_switch_on_eof = 1;
	}


void yyFlexLexer::yy_load_buffer_state()
	{
	yy_n_chars = yy_current_buffer->yy_n_chars;
	yytext_ptr = yy_c_buf_p = yy_current_buffer->yy_buf_pos;
	yyin = yy_current_buffer->yy_input_file;
	yy_hold_char = *yy_c_buf_p;
	}


YY_BUFFER_STATE yyFlexLexer::yy_create_buffer( istream* file, int size )
	{
	YY_BUFFER_STATE b;

	b = (YY_BUFFER_STATE) yy_flex_alloc( sizeof( struct yy_buffer_state ) );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yy_flex_alloc( b->yy_buf_size + 2 );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer( b, file );

	return b;
	}


void yyFlexLexer::yy_delete_buffer( YY_BUFFER_STATE b )
	{
	if ( ! b )
		return;

	if ( b == yy_current_buffer )
		yy_current_buffer = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yy_flex_free( (void *) b->yy_ch_buf );

	yy_flex_free( (void *) b );
	}


extern "C" int isatty YY_PROTO(( int ));
void yyFlexLexer::yy_init_buffer( YY_BUFFER_STATE b, istream* file )

	{
	yy_flush_buffer( b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

	b->yy_is_interactive = 0;
	}


void yyFlexLexer::yy_flush_buffer( YY_BUFFER_STATE b )
	{
	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == yy_current_buffer )
		yy_load_buffer_state();
	}


#ifndef YY_NO_SCAN_BUFFER
#endif


#ifndef YY_NO_SCAN_STRING
#endif


#ifndef YY_NO_SCAN_BYTES
#endif


#ifndef YY_NO_PUSH_STATE
void yyFlexLexer::yy_push_state( int new_state )
	{
	if ( yy_start_stack_ptr >= yy_start_stack_depth )
		{
		yy_size_t new_size;

		yy_start_stack_depth += YY_START_STACK_INCR;
		new_size = yy_start_stack_depth * sizeof( int );

		if ( ! yy_start_stack )
			yy_start_stack = (int *) yy_flex_alloc( new_size );

		else
			yy_start_stack = (int *) yy_flex_realloc(
					(void *) yy_start_stack, new_size );

		if ( ! yy_start_stack )
			YY_FATAL_ERROR(
			"out of memory expanding start-condition stack" );
		}

	yy_start_stack[yy_start_stack_ptr++] = YY_START;

	BEGIN(new_state);
	}
#endif


#ifndef YY_NO_POP_STATE
void yyFlexLexer::yy_pop_state()
	{
	if ( --yy_start_stack_ptr < 0 )
		YY_FATAL_ERROR( "start-condition stack underflow" );

	BEGIN(yy_start_stack[yy_start_stack_ptr]);
	}
#endif


#ifndef YY_NO_TOP_STATE
int yyFlexLexer::yy_top_state()
	{
	return yy_start_stack[yy_start_stack_ptr - 1];
	}
#endif

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif


void yyFlexLexer::LexerError( yyconst char msg[] )
	{
	cerr << msg << '\n';
	exit( YY_EXIT_FAILURE );
	}


/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
		yytext[yyleng] = yy_hold_char; \
		yy_c_buf_p = yytext + n; \
		yy_hold_char = *yy_c_buf_p; \
		*yy_c_buf_p = '\0'; \
		yyleng = n; \
		} \
	while ( 0 )


/* Internal utility routines. */

#ifndef yytext_ptr
#ifdef YY_USE_PROTOS
static void yy_flex_strncpy( char *s1, yyconst char *s2, int n )
#else
static void yy_flex_strncpy( s1, s2, n )
char *s1;
yyconst char *s2;
int n;
#endif
	{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
	}
#endif

#ifdef YY_NEED_STRLEN
#ifdef YY_USE_PROTOS
static int yy_flex_strlen( yyconst char *s )
#else
static int yy_flex_strlen( s )
yyconst char *s;
#endif
	{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
	}
#endif


#ifdef YY_USE_PROTOS
static void *yy_flex_alloc( yy_size_t size )
#else
static void *yy_flex_alloc( size )
yy_size_t size;
#endif
	{
	return (void *) malloc( size );
	}

#ifdef YY_USE_PROTOS
static void *yy_flex_realloc( void *ptr, yy_size_t size )
#else
static void *yy_flex_realloc( ptr, size )
void *ptr;
yy_size_t size;
#endif
	{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
	}

#ifdef YY_USE_PROTOS
static void yy_flex_free( void *ptr )
#else
static void yy_flex_free( ptr )
void *ptr;
#endif
	{
	free( ptr );
	}

#if YY_MAIN
int main()
	{
	yylex();
	return 0;
	}
#endif
#line 157 "C:\\Users\\hossam\\Documents\\GitHub\\comp\\comp\\lex.l"

